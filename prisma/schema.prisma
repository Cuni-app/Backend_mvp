// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

//! Aqui se agregan los modelos para crear la base de datos

model administrador {
  id       Int    @id @default(autoincrement())
  nombre   String @default("ADMIN")
  email    String @default("cuni@empresa.com")
  password String
}

model user {
  id             Int         @id @default(autoincrement())
  nombre         String
  email          String      @unique
  validatedEmail Boolean     @default(false)
  password       String
  premium        Boolean     @default(false)
  nivel          Int         @default(1)
  exp            Int         @default(0)
  racha          Int         @default(0)
  monedas        Int         @default(0)
  fechaCreacion  DateTime    @default(now())
  resultados     resultado[] @relation("UserResultados")
  amigos1        amigo[]     @relation("Usuario1Amigos")
  amigos2        amigo[]     @relation("Usuario2Amigos")
  items          item[]      @relation("UsuarioItems")
}

model item {
  id       Int    @id @default(autoincrement())
  nombre   String
  precio   Int
  usuarios user[] @relation("UsuarioItems")
}

model amigo {
  id          Int    @id @default(autoincrement())
  id_usuario1 Int
  id_usuario2 Int
  estado      String
  usuario1    user   @relation("Usuario1Amigos", fields: [id_usuario1], references: [id])
  usuario2    user   @relation("Usuario2Amigos", fields: [id_usuario2], references: [id])

  @@unique([id_usuario1, id_usuario2])
  @@unique([id_usuario2, id_usuario1])
}

model resultado {
  id                  Int       @id @default(autoincrement())
  tiempo              Int
  calificacion        Int
  cantidadCorrectas   Int
  cantidadIncorrectas Int
  user                user      @relation("UserResultados", fields: [id_usuario], references: [id])
  id_usuario          Int
  categoria           categoria @relation("CategoriaResultados", fields: [id_categoria], references: [id])
  id_categoria        Int

  @@unique([id_usuario, id_categoria]) // Asegura que no haya duplicados en la relaci√≥n
}

model categoria {
  id         Int         @id @default(autoincrement())
  nombre     String      @unique
  duracion   Int
  resultados resultado[] @relation("CategoriaResultados")
  pregunta   pregunta[]  @relation("CategoriaPregunta")
}

model pregunta {
  id           Int         @id @default(autoincrement())
  enunciado    String
  imagen_url   String?
  solucion_url String?
  id_categoria Int
  categoria    categoria   @relation("CategoriaPregunta", fields: [id_categoria], references: [id])
  respuesta    respuesta[] @relation("PreguntaRespuesta")
}

model respuesta {
  id          Int      @id @default(autoincrement())
  esCorrecto  Boolean
  contenido   String
  id_pregunta Int
  pregunta    pregunta @relation("PreguntaRespuesta", fields: [id_pregunta], references: [id])
}
